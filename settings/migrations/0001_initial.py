# Generated by Django 2.1.12 on 2019-09-29 10:53

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='DataBases',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('database', models.CharField(max_length=254, verbose_name='Имя базы данных')),
                ('server', models.CharField(max_length=254, verbose_name='Сервер')),
                ('user', models.CharField(max_length=254, verbose_name='Имя пользователя')),
                ('pwd', models.CharField(max_length=254, verbose_name='Пароль')),
                ('driver', models.CharField(max_length=254, verbose_name='Драйвер')),
                ('title', models.CharField(default='Объект 1', max_length=254, verbose_name='Отображаемое имя')),
                ('get_count_clients', models.BooleanField(default=False, verbose_name='Есть зоны')),
                ('get_total_sum', models.BooleanField(default=False, verbose_name='Показывать сумму')),
            ],
            options={
                'verbose_name': 'базу данных',
                'verbose_name_plural': 'Базы данных',
            },
        ),
        migrations.CreateModel(
            name='FinanceReportCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=254, verbose_name='Имя категории')),
            ],
            options={
                'verbose_name': 'категорию финансового отчета',
                'verbose_name_plural': 'Категории финансового отчета',
            },
        ),
        migrations.CreateModel(
            name='PayAgentReportCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=254, verbose_name='Имя категории')),
            ],
            options={
                'verbose_name': 'категорию отчета платежного агента',
                'verbose_name_plural': 'Категории отчета платежного агента',
            },
        ),
        migrations.CreateModel(
            name='SettingBase',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('db_aqua', models.ForeignKey(help_text='Значение из списка раздела "Базы данных"', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='aqua', to='settings.DataBases', verbose_name='БД Bars-Аквапарк')),
                ('db_beach', models.ForeignKey(help_text='Значение из списка раздела "Базы данных"', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='beach', to='settings.DataBases', verbose_name='БД Bars-Пляж')),
                ('db_bitrix', models.ForeignKey(help_text='Значение из списка раздела "Базы данных"', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='bitrix', to='settings.DataBases', verbose_name='БД Bitrix')),
            ],
            options={
                'verbose_name': 'сопоставление баз данных',
            },
        ),
        migrations.CreateModel(
            name='SettingBitrix',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.SlugField(help_text='Адрес сайта без "http://" и "/", например "exsample.com"', null=True, verbose_name='Адрес сайта')),
                ('path', models.CharField(default='/bitrix/admin/1c_exchange.php', help_text='Путь к обработчику 1С на сайте', max_length=255, verbose_name='Путь к обработчику 1С')),
                ('login', models.CharField(help_text='Логин админки bitrix', max_length=255, null=True, verbose_name='Логин')),
                ('password', models.CharField(help_text='Пароль админки bitrix', max_length=255, null=True, verbose_name='Пароль')),
            ],
            options={
                'verbose_name': 'настройки Bitrix',
            },
        ),
        migrations.CreateModel(
            name='SettingGoogleSheets',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('credentials_file', models.FileField(upload_to='data/', verbose_name='JSON-token')),
                ('writers', models.TextField(blank=True, help_text='Список email-адресов через запятую', null=True, verbose_name='Список редакторов')),
                ('readers', models.TextField(blank=True, help_text='Список email-адресов через запятую', null=True, verbose_name='Список зрителей')),
                ('is_read_all', models.BooleanField(default=False, verbose_name='Разрешить просмотр по ссылке для всех')),
            ],
            options={
                'verbose_name': 'настройки GoogleSheets',
            },
        ),
        migrations.CreateModel(
            name='SettingTelegram',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('token', models.CharField(help_text='Telegram-токен', max_length=255, null=True, verbose_name='Telegram-токен')),
                ('chanel_id', models.IntegerField(help_text='ID пользователя или группы', null=True, verbose_name='ID канала')),
                ('is_proxy', models.BooleanField(default=False, verbose_name='Использовать прокси')),
                ('proxy_type', models.CharField(choices=[('PROXY_TYPE_SOCKS5', 'SOCKS5'), ('PROXY_TYPE_SOCKS4', 'SOCKS4'), ('PROXY_TYPE_HTTP', 'HTTP')], default='PROXY_TYPE_SOCKS5', max_length=30, verbose_name='Тип прокси')),
                ('proxy_host', models.SlugField(blank=True, help_text='Адрес сервера без "http://" и "/"', null=True, verbose_name='Адрес прокси-сервера')),
                ('proxy_port', models.PositiveIntegerField(blank=True, default=80, help_text='ID пользователя или группы', null=True, verbose_name='Порт прокси сервера')),
                ('is_auth', models.BooleanField(default=False, verbose_name='Нужна авторизация')),
                ('username', models.CharField(blank=True, help_text='Логин прокси сервера', max_length=255, null=True, verbose_name='Логин прокси')),
                ('password', models.CharField(blank=True, help_text='Пароль прокси сервера', max_length=255, null=True, verbose_name='Пароль прокси')),
            ],
            options={
                'verbose_name': 'настройки Telegram',
            },
        ),
        migrations.CreateModel(
            name='SettingYandex',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('token', models.CharField(help_text='Yandex-токен', max_length=255, null=True, verbose_name='Yandex-токен')),
                ('path', models.CharField(default='/', help_text='Путь к папке в Yandex-Диске', max_length=255, verbose_name='Путь к папке')),
            ],
            options={
                'verbose_name': 'настройки Yandex.Disk',
            },
        ),
        migrations.CreateModel(
            name='TariffList',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=254, verbose_name='Тариф')),
                ('finance_report_category', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='settings.FinanceReportCategory', verbose_name='Категория финансового отчета')),
                ('pay_agent_report_category', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='settings.PayAgentReportCategory', verbose_name='Категория отчета платежного агента')),
            ],
            options={
                'verbose_name': 'тариф',
                'verbose_name_plural': 'Список тарифов',
            },
        ),
    ]
