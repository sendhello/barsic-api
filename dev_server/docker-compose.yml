version: '3.8'

services:
  app:
    container_name: "api"
    build:
      context: "../"
      dockerfile: "Dockerfile"
    env_file:
      - "../.env"
    command: >
      bash -c "python manage.py migrate
      && python manage.py initadmin
      && python manage.py runserver 0.0.0.0:8000"
    volumes:
      - ../:/app
    ports:
      - "8000:8000"
    networks:
      - "app"
    restart: "unless-stopped"
    depends_on:
      db:
        condition: service_healthy
      bars_db:
        condition: service_healthy

  db:
    container_name: "postgres_db"
    image: "postgres:alpine"
    volumes:
      - db_data:/var/lib/postgresql/data
    env_file:
      - "../.env"
    restart: "unless-stopped"
    networks:
      - "app"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $POSTGRES_USER -d $POSTGRES_DB" ]
      interval: 3s
      timeout: 5s
      retries: 5

  bars_db:
    container_name: "bars_db"
    image: "mcr.microsoft.com/mssql/server:2017-latest"
    volumes:
      - bars_db_data:/var/opt/mssql/data
      - ./backup/:/var/opt/mssql/backup
    env_file:
      - "../.env"
    restart: "unless-stopped"
    ports:
      - "1433:1433"
    networks:
      - "app"
    healthcheck:
      test: /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P "$$SA_PASSWORD" -Q "SELECT 1" || exit 1
      interval: 3s
      timeout: 3s
      retries: 10
      start_period: 10s

networks:
  app:
    driver: "bridge"

volumes:
  db_data:
  bars_db_data:
