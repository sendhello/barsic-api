# Generated by Django 2.1.10 on 2019-08-10 12:54

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Accountstock',
            fields=[
                ('accountstockid', models.AutoField(db_column='AccountStockId', primary_key=True, serialize=False)),
                ('stocktype', models.SmallIntegerField(db_column='StockType')),
                ('isactive', models.BooleanField(db_column='IsActive')),
                ('amount', models.DecimalField(blank=True, db_column='Amount', decimal_places=2, max_digits=18, null=True)),
                ('start', models.DateTimeField(blank=True, db_column='Start', null=True)),
                ('end', models.DateTimeField(blank=True, db_column='End', null=True)),
                ('istimepatternapplied', models.BooleanField(blank=True, db_column='IsTimePatternApplied', null=True)),
                ('code', models.CharField(blank=True, db_column='Code', max_length=50, null=True)),
                ('name', models.CharField(blank=True, db_column='Name', max_length=50, null=True)),
                ('targetaccountstockid', models.IntegerField(blank=True, db_column='TargetAccountStockId', null=True)),
                ('ticketnumber', models.IntegerField(blank=True, db_column='TicketNumber', null=True)),
                ('ticketset', models.CharField(blank=True, db_column='TicketSet', max_length=5, null=True)),
                ('passesdone', models.IntegerField(blank=True, db_column='PassesDone', null=True)),
                ('tilldate', models.DateTimeField(blank=True, db_column='TillDate', null=True)),
                ('number', models.IntegerField(blank=True, db_column='Number', null=True)),
                ('prebookedtill', models.DateTimeField(blank=True, db_column='PreBookedTill', null=True)),
                ('keyownerid', models.IntegerField(blank=True, db_column='KeyOwnerId', null=True)),
                ('expectedexittime', models.DateTimeField(blank=True, db_column='ExpectedExitTime', null=True)),
                ('lastuse', models.DateTimeField(blank=True, db_column='LastUse', null=True)),
                ('externalid', models.IntegerField(blank=True, db_column='ExternalId', null=True)),
            ],
            options={
                'db_table': 'AccountStock',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Accounttag',
            fields=[
                ('accounttagid', models.AutoField(db_column='AccountTagId', primary_key=True, serialize=False)),
                ('ownerid', models.IntegerField(db_column='OwnerId')),
                ('amount', models.DecimalField(db_column='Amount', decimal_places=2, max_digits=18)),
            ],
            options={
                'db_table': 'AccountTag',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Activity',
            fields=[
                ('activityid', models.AutoField(db_column='ActivityId', primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, db_column='Name', max_length=255, null=True)),
                ('parentid', models.IntegerField(blank=True, db_column='ParentId', null=True)),
                ('reserveminutes', models.IntegerField(blank=True, db_column='ReserveMinutes', null=True)),
                ('depth', models.IntegerField(blank=True, db_column='Depth', null=True)),
                ('extendeddata', models.TextField(blank=True, db_column='ExtendedData', null=True)),
                ('sellwithoutscheme', models.BooleanField(db_column='SellWithoutScheme')),
                ('placereservetimelimit', models.IntegerField(blank=True, db_column='PlaceReserveTimeLimit', null=True)),
                ('reservetemplateid', models.IntegerField(blank=True, db_column='ReserveTemplateId', null=True)),
                ('allowselldaysbefore', models.IntegerField(blank=True, db_column='AllowSellDaysBefore', null=True)),
                ('allowsellfrom', models.DateTimeField(blank=True, db_column='AllowSellFrom', null=True)),
                ('allowsellto', models.DateTimeField(blank=True, db_column='AllowSellTo', null=True)),
                ('independentschedules', models.BooleanField(db_column='IndependentSchedules')),
            ],
            options={
                'db_table': 'Activity',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Activitybookinginfo',
            fields=[
                ('activitybookinginfoid', models.AutoField(db_column='ActivityBookingInfoId', primary_key=True, serialize=False)),
                ('prebookedtill', models.DateTimeField(blank=True, db_column='PreBookedTill', null=True)),
                ('bookingstatus', models.IntegerField(blank=True, db_column='BookingStatus', null=True)),
                ('quantity', models.IntegerField(blank=True, db_column='Quantity', null=True)),
            ],
            options={
                'db_table': 'ActivityBookingInfo',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Activityschedule',
            fields=[
                ('activityscheduleid', models.AutoField(db_column='ActivityScheduleId', primary_key=True, serialize=False)),
                ('datefrom', models.DateTimeField(blank=True, db_column='DateFrom', null=True)),
                ('dateto', models.DateTimeField(blank=True, db_column='DateTo', null=True)),
                ('nextactivityscheduleid', models.IntegerField(blank=True, db_column='NextActivityScheduleId', null=True)),
                ('isallowsplit', models.BooleanField(blank=True, db_column='IsAllowSplit', null=True)),
                ('reservequantity', models.IntegerField(blank=True, db_column='ReserveQuantity', null=True)),
                ('islastforbooking', models.BooleanField(blank=True, db_column='IsLastForBooking', null=True)),
                ('luftminutesafterend', models.IntegerField(blank=True, db_column='LuftMinutesAfterEnd', null=True)),
                ('seasontemplateid', models.IntegerField(blank=True, db_column='SeasonTemplateId', null=True)),
            ],
            options={
                'db_table': 'ActivitySchedule',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Agreement',
            fields=[
                ('agreementid', models.AutoField(db_column='AgreementId', primary_key=True, serialize=False)),
                ('from_field', models.DateTimeField(blank=True, db_column='From', null=True)),
                ('to', models.DateTimeField(blank=True, db_column='To', null=True)),
                ('isactive', models.BooleanField(db_column='IsActive')),
                ('comment', models.TextField(blank=True, db_column='Comment', null=True)),
                ('extendeddata', models.TextField(blank=True, db_column='ExtendedData', null=True)),
            ],
            options={
                'db_table': 'Agreement',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Agreementtype',
            fields=[
                ('agreementtypeid', models.AutoField(db_column='AgreementTypeId', primary_key=True, serialize=False)),
                ('name', models.CharField(db_column='Name', max_length=100)),
                ('extendeddata', models.TextField(blank=True, db_column='ExtendedData', null=True)),
            ],
            options={
                'db_table': 'AgreementType',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Auditcfg',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('savedeventtypes', models.IntegerField()),
                ('savedeventimportances', models.IntegerField()),
            ],
            options={
                'db_table': 'AuditCfg',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Booking',
            fields=[
                ('bookingid', models.AutoField(db_column='BookingId', primary_key=True, serialize=False)),
                ('targetid', models.IntegerField(db_column='TargetId')),
                ('targettype', models.SmallIntegerField(db_column='TargetType')),
                ('scope', models.IntegerField(db_column='Scope')),
                ('cancross', models.BooleanField(db_column='CanCross')),
            ],
            options={
                'db_table': 'Booking',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Bookingspan',
            fields=[
                ('bookingspanid', models.AutoField(db_column='BookingSpanId', primary_key=True, serialize=False)),
                ('spanfrom', models.DateTimeField(db_column='SpanFrom')),
                ('spanto', models.DateTimeField(blank=True, db_column='SpanTo', null=True)),
                ('amount', models.DecimalField(blank=True, db_column='Amount', decimal_places=2, max_digits=18, null=True)),
                ('clientaccountstockid', models.IntegerField(blank=True, db_column='ClientAccountStockId', null=True)),
                ('spanpaidto', models.DateTimeField(blank=True, db_column='SpanPaidTo', null=True)),
                ('bookingmode', models.IntegerField(blank=True, db_column='BookingMode', null=True)),
                ('cardcode', models.CharField(blank=True, db_column='CardCode', max_length=32, null=True)),
            ],
            options={
                'db_table': 'BookingSpan',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Bookingspantag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(db_column='Amount', decimal_places=2, max_digits=18)),
            ],
            options={
                'db_table': 'BookingSpanTag',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Calendar',
            fields=[
                ('calendarid', models.IntegerField(db_column='CalendarId', primary_key=True, serialize=False)),
                ('name', models.CharField(db_column='Name', max_length=100)),
                ('start', models.DateTimeField(db_column='Start')),
                ('end', models.DateTimeField(db_column='End')),
            ],
            options={
                'db_table': 'Calendar',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Calendarday',
            fields=[
                ('calendardayid', models.IntegerField(db_column='CalendarDayId', primary_key=True, serialize=False)),
                ('datetime', models.DateTimeField(db_column='DateTime')),
            ],
            options={
                'db_table': 'CalendarDay',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('categoryid', models.IntegerField(db_column='CategoryId', primary_key=True, serialize=False)),
                ('stocktype', models.SmallIntegerField(db_column='StockType')),
                ('name', models.CharField(db_column='Name', max_length=100)),
                ('timedelay', models.FloatField(blank=True, db_column='TimeDelay', null=True)),
                ('pattern', models.CharField(blank=True, db_column='Pattern', max_length=255, null=True)),
                ('sellaction', models.IntegerField(blank=True, db_column='SellAction', null=True)),
                ('ispercent', models.BooleanField(blank=True, db_column='IsPercent', null=True)),
                ('prepayamount', models.DecimalField(blank=True, db_column='PrepayAmount', decimal_places=2, max_digits=18, null=True)),
                ('maxtimes', models.IntegerField(blank=True, db_column='MaxTimes', null=True)),
                ('codeemittype', models.IntegerField(blank=True, db_column='CodeEmitType', null=True)),
                ('codelength', models.IntegerField(blank=True, db_column='CodeLength', null=True)),
                ('codeprefix', models.CharField(blank=True, db_column='CodePrefix', max_length=50, null=True)),
                ('payonread', models.BooleanField(blank=True, db_column='PayOnRead', null=True)),
                ('onetime', models.BooleanField(blank=True, db_column='OneTime', null=True)),
                ('moneypolitics', models.IntegerField(db_column='MoneyPolitics')),
                ('expectedexitminutes', models.FloatField(db_column='ExpectedExitMinutes')),
                ('days', models.IntegerField(blank=True, db_column='Days', null=True)),
                ('passes', models.IntegerField(blank=True, db_column='Passes', null=True)),
                ('accesscode', models.IntegerField(blank=True, db_column='AccessCode', null=True)),
                ('displayformat', models.CharField(blank=True, db_column='DisplayFormat', max_length=50, null=True)),
                ('allowautosell', models.BooleanField(blank=True, db_column='AllowAutoSell', null=True)),
                ('nn', models.CharField(blank=True, db_column='NN', max_length=20, null=True)),
                ('allwaysgenerate', models.BooleanField(blank=True, db_column='AllwaysGenerate', null=True)),
                ('cardgenerratealgorithm', models.IntegerField(blank=True, db_column='CardGenerrateAlgorithm', null=True)),
                ('reportweight', models.FloatField(blank=True, db_column='ReportWeight', null=True)),
                ('extendeddata', models.TextField(blank=True, db_column='ExtendedData', null=True)),
                ('vat', models.IntegerField(db_column='Vat')),
                ('vatpercent', models.DecimalField(blank=True, db_column='VatPercent', decimal_places=2, max_digits=18, null=True)),
                ('personalinforequirment', models.IntegerField(db_column='PersonalInfoRequirment')),
                ('section', models.IntegerField(db_column='Section')),
                ('priority', models.IntegerField(blank=True, db_column='Priority', null=True)),
                ('taxsystem', models.IntegerField(db_column='TaxSystem')),
                ('subjecttype', models.IntegerField(blank=True, db_column='SubjectType', null=True)),
                ('ispromotional', models.BooleanField(db_column='IsPromotional')),
            ],
            options={
                'db_table': 'Category',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Check',
            fields=[
                ('checkid', models.AutoField(db_column='CheckId', primary_key=True, serialize=False)),
                ('typeoper', models.SmallIntegerField(blank=True, db_column='TypeOper', null=True)),
                ('cassa', models.SmallIntegerField(blank=True, db_column='Cassa', null=True)),
                ('smena', models.SmallIntegerField(blank=True, db_column='Smena', null=True)),
                ('nomer', models.SmallIntegerField(blank=True, db_column='Nomer', null=True)),
                ('summa', models.DecimalField(blank=True, db_column='Summa', decimal_places=4, max_digits=19, null=True)),
                ('nal', models.DecimalField(blank=True, db_column='Nal', decimal_places=4, max_digits=19, null=True)),
                ('beznal', models.DecimalField(blank=True, db_column='Beznal', decimal_places=4, max_digits=19, null=True)),
                ('chet', models.DecimalField(blank=True, db_column='Chet', decimal_places=4, max_digits=19, null=True)),
                ('status', models.SmallIntegerField(blank=True, db_column='Status', null=True)),
                ('error', models.IntegerField(blank=True, db_column='Error', null=True)),
                ('texterror', models.CharField(blank=True, db_column='TextError', max_length=100, null=True)),
                ('data', models.DateTimeField(blank=True, db_column='Data', null=True)),
                ('bonus', models.DecimalField(blank=True, db_column='Bonus', decimal_places=4, max_digits=19, null=True)),
                ('bonustoadd', models.DecimalField(blank=True, db_column='BonusToAdd', decimal_places=4, max_digits=19, null=True)),
                ('card', models.CharField(blank=True, db_column='Card', max_length=50, null=True)),
                ('userid', models.IntegerField(blank=True, db_column='UserId', null=True)),
                ('zcounter', models.DecimalField(blank=True, db_column='ZCounter', decimal_places=2, max_digits=18, null=True)),
                ('zreturns', models.DecimalField(blank=True, db_column='ZReturns', decimal_places=2, max_digits=18, null=True)),
                ('zsells', models.DecimalField(blank=True, db_column='ZSells', decimal_places=2, max_digits=18, null=True)),
                ('zsmena', models.IntegerField(blank=True, db_column='ZSmena', null=True)),
                ('currency', models.DecimalField(blank=True, db_column='Currency', decimal_places=4, max_digits=19, null=True)),
                ('extendeddata', models.TextField(blank=True, db_column='ExtendedData', null=True)),
                ('datekkt', models.DateTimeField(blank=True, db_column='DateKKT', null=True)),
                ('email', models.CharField(blank=True, max_length=50, null=True)),
                ('fpd', models.CharField(blank=True, db_column='FPD', max_length=10, null=True)),
                ('phone', models.CharField(blank=True, max_length=20, null=True)),
                ('regnumkkt', models.CharField(blank=True, db_column='RegNumKKT', max_length=16, null=True)),
                ('numberfn', models.CharField(blank=True, db_column='NumberFN', max_length=16, null=True)),
                ('sendstateemail', models.SmallIntegerField(db_column='SendStateEmail')),
                ('sendstatesms', models.SmallIntegerField(db_column='SendStateSms')),
                ('emailsendattempts', models.SmallIntegerField(db_column='EmailSendAttempts')),
                ('smssendattempts', models.SmallIntegerField(db_column='SmsSendAttempts')),
                ('inn', models.CharField(blank=True, db_column='INN', max_length=12, null=True)),
                ('numberfd', models.IntegerField(blank=True, db_column='NumberFD', null=True)),
            ],
            options={
                'db_table': 'Check',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Checkdetail',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('mastertransactionid', models.IntegerField(blank=True, db_column='MasterTransactionId', null=True)),
                ('name', models.CharField(blank=True, db_column='Name', max_length=200, null=True)),
                ('count', models.DecimalField(blank=True, db_column='Count', decimal_places=3, max_digits=18, null=True)),
                ('price', models.DecimalField(blank=True, db_column='Price', decimal_places=2, max_digits=18, null=True)),
                ('cardcode', models.CharField(blank=True, db_column='CardCode', max_length=50, null=True)),
                ('isdebtclose', models.BooleanField(db_column='IsDebtClose')),
                ('extendeddata', models.TextField(blank=True, db_column='ExtendedData', null=True)),
                ('typegood', models.IntegerField(blank=True, db_column='TypeGood', null=True)),
                ('vat', models.IntegerField(db_column='Vat')),
                ('vatpercent', models.IntegerField(blank=True, db_column='VatPercent', null=True)),
                ('section', models.IntegerField(db_column='Section')),
            ],
            options={
                'db_table': 'CheckDetail',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Checkpay',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(db_column='Amount', decimal_places=2, max_digits=18)),
                ('extendeddata', models.TextField(blank=True, db_column='ExtendedData', null=True)),
                ('referenceno', models.CharField(blank=True, db_column='ReferenceNo', max_length=50, null=True)),
                ('externalpayerid', models.IntegerField(blank=True, db_column='ExternalPayerId', null=True)),
                ('externalpayerreference', models.CharField(blank=True, db_column='ExternalPayerReference', max_length=50, null=True)),
            ],
            options={
                'db_table': 'CheckPay',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Checkpaytype',
            fields=[
                ('name', models.CharField(db_column='Name', max_length=50)),
                ('isfiscal', models.BooleanField(db_column='IsFiscal')),
                ('printercode', models.IntegerField(db_column='PrinterCode')),
                ('processingtype', models.IntegerField(db_column='ProcessingType')),
                ('processingname', models.CharField(blank=True, db_column='ProcessingName', max_length=50, null=True)),
                ('issystem', models.BooleanField(db_column='IsSystem')),
                ('checkpaytypeid', models.AutoField(db_column='CheckPayTypeId', primary_key=True, serialize=False)),
                ('extendeddata', models.TextField(blank=True, db_column='ExtendedData', null=True)),
                ('noreturn', models.BooleanField(db_column='NoReturn')),
                ('isenabled', models.BooleanField(db_column='IsEnabled')),
                ('position', models.SmallIntegerField(db_column='Position')),
            ],
            options={
                'db_table': 'CheckPayType',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Checkprinttask',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('created', models.DateTimeField(db_column='Created')),
                ('finished', models.DateTimeField(blank=True, db_column='Finished', null=True)),
                ('status', models.SmallIntegerField(db_column='Status')),
                ('externalid', models.CharField(blank=True, db_column='ExternalId', max_length=50, null=True)),
                ('profileid', models.SmallIntegerField(db_column='ProfileId')),
                ('data', models.CharField(db_column='Data', max_length=4000)),
                ('errorscount', models.SmallIntegerField(db_column='ErrorsCount')),
                ('lasterror', models.CharField(blank=True, db_column='LastError', max_length=4000, null=True)),
            ],
            options={
                'db_table': 'CheckPrintTask',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Clientcategory',
            fields=[
                ('clientcategoryid', models.AutoField(db_column='ClientCategoryId', primary_key=True, serialize=False)),
                ('name', models.CharField(db_column='Name', max_length=100)),
                ('isadministrative', models.BooleanField(db_column='IsAdministrative')),
                ('accesscode', models.IntegerField(blank=True, db_column='AccessCode', null=True)),
                ('externalid', models.CharField(blank=True, db_column='ExternalId', max_length=50, null=True)),
                ('extebdeddata', models.TextField(blank=True, db_column='ExtebdedData', null=True)),
            ],
            options={
                'db_table': 'ClientCategory',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Codegeneration',
            fields=[
                ('codegenerationid', models.BigAutoField(db_column='CodeGenerationId', primary_key=True, serialize=False)),
                ('user', models.CharField(db_column='User', max_length=50)),
                ('time', models.DateTimeField(db_column='Time')),
            ],
            options={
                'db_table': 'CodeGeneration',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Communicationport',
            fields=[
                ('communicationportid', models.IntegerField(db_column='CommunicationPortId', primary_key=True, serialize=False)),
                ('type', models.IntegerField(db_column='Type')),
                ('number', models.IntegerField(blank=True, db_column='Number', null=True)),
                ('speed', models.IntegerField(blank=True, db_column='Speed', null=True)),
                ('ip', models.CharField(blank=True, db_column='Ip', max_length=20, null=True)),
                ('ipport', models.IntegerField(blank=True, db_column='IpPort', null=True)),
                ('extendeddata', models.TextField(blank=True, db_column='ExtendedData', null=True)),
            ],
            options={
                'db_table': 'CommunicationPort',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Computer',
            fields=[
                ('computerid', models.IntegerField(db_column='ComputerId', primary_key=True, serialize=False)),
                ('name', models.CharField(db_column='Name', max_length=100)),
                ('monitoringport', models.IntegerField(db_column='MonitoringPort')),
                ('extendeddata', models.TextField(blank=True, db_column='ExtendedData', null=True)),
            ],
            options={
                'db_table': 'Computer',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Controller',
            fields=[
                ('controllerid', models.IntegerField(db_column='ControllerId', primary_key=True, serialize=False)),
                ('type', models.IntegerField(db_column='Type')),
                ('code', models.IntegerField(db_column='Code')),
                ('name', models.CharField(blank=True, db_column='Name', max_length=100, null=True)),
                ('isactive', models.BooleanField(db_column='IsActive')),
                ('indicationmask', models.IntegerField(db_column='IndicationMask')),
                ('extendeddata', models.TextField(blank=True, db_column='ExtendedData', null=True)),
            ],
            options={
                'db_table': 'Controller',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CustomComment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('transid', models.IntegerField(blank=True, db_column='TransID', null=True)),
                ('comment', models.TextField(blank=True, db_column='Comment', null=True)),
                ('superaccount', models.IntegerField(blank=True, db_column='SuperAccount', null=True)),
            ],
            options={
                'db_table': 'Custom_Comment',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Daytimeinterval',
            fields=[
                ('daytimeintervalid', models.IntegerField(db_column='DayTimeIntervalId', primary_key=True, serialize=False)),
                ('start', models.DateTimeField(db_column='Start')),
                ('end', models.DateTimeField(db_column='End')),
                ('allow', models.BooleanField(db_column='Allow')),
            ],
            options={
                'db_table': 'DayTimeInterval',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Daytype',
            fields=[
                ('daytypeid', models.IntegerField(db_column='DayTypeId', primary_key=True, serialize=False)),
                ('name', models.CharField(db_column='Name', max_length=100)),
                ('color', models.IntegerField(db_column='Color')),
            ],
            options={
                'db_table': 'DayType',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Defect',
            fields=[
                ('defectid', models.AutoField(db_column='DefectId', primary_key=True, serialize=False)),
                ('time', models.DateTimeField(db_column='Time')),
                ('ticketnumber', models.IntegerField(db_column='TicketNumber')),
                ('ticketset', models.CharField(db_column='TicketSet', max_length=5)),
                ('cardcode', models.CharField(blank=True, db_column='CardCode', max_length=50, null=True)),
                ('newcardcode', models.CharField(blank=True, db_column='NewCardCode', max_length=50, null=True)),
            ],
            options={
                'db_table': 'Defect',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Defectreason',
            fields=[
                ('defectreasonid', models.AutoField(db_column='DefectReasonId', primary_key=True, serialize=False)),
                ('name', models.CharField(db_column='Name', max_length=50)),
                ('action', models.SmallIntegerField(db_column='Action')),
                ('reprint', models.BooleanField(db_column='Reprint')),
            ],
            options={
                'db_table': 'DefectReason',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('datetime', models.DateTimeField()),
                ('type', models.IntegerField()),
                ('importance', models.IntegerField()),
                ('userid', models.IntegerField()),
                ('info', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'Event',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Externalseller',
            fields=[
                ('externalsellerid', models.AutoField(db_column='ExternalSellerId', primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, db_column='Name', max_length=100, null=True)),
                ('address', models.CharField(blank=True, db_column='Address', max_length=200, null=True)),
                ('extendeddata', models.TextField(blank=True, db_column='ExtendedData', null=True)),
            ],
            options={
                'db_table': 'ExternalSeller',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Externalsellerpool',
            fields=[
                ('externalsellerpoolid', models.IntegerField(db_column='ExternalSellerPoolId', primary_key=True, serialize=False)),
                ('accepttime', models.DateTimeField(db_column='AcceptTime')),
                ('data', models.TextField(db_column='Data')),
                ('report', models.TextField(db_column='Report')),
                ('direction', models.IntegerField(db_column='Direction')),
                ('comment', models.CharField(blank=True, db_column='Comment', max_length=200, null=True)),
                ('extendeddata', models.TextField(blank=True, db_column='ExtendedData', null=True)),
            ],
            options={
                'db_table': 'ExternalSellerPool',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Geography',
            fields=[
                ('geographyid', models.AutoField(db_column='GeographyId', primary_key=True, serialize=False)),
                ('name', models.CharField(db_column='Name', max_length=50)),
            ],
            options={
                'db_table': 'Geography',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Global',
            fields=[
                ('globalid', models.BigIntegerField(db_column='GlobalId', primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'Global',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Globalconfig',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('config', models.TextField(db_column='Config')),
            ],
            options={
                'db_table': 'GlobalConfig',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Globalid',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('stocktype', models.IntegerField(db_column='StockType')),
            ],
            options={
                'db_table': 'GlobalId',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Goodprice',
            fields=[
                ('goodpriceid', models.IntegerField(db_column='GoodPriceId', primary_key=True, serialize=False)),
                ('goodid', models.IntegerField(db_column='GoodId')),
                ('goodtype', models.IntegerField(db_column='GoodType')),
                ('daytypeid', models.IntegerField(db_column='DayTypeId')),
                ('price', models.DecimalField(db_column='Price', decimal_places=2, max_digits=18)),
            ],
            options={
                'db_table': 'GoodPrice',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Hardwareevent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time', models.DateTimeField(db_column='Time')),
                ('eventtype', models.IntegerField(db_column='EventType')),
                ('servername', models.CharField(db_column='ServerName', max_length=50)),
                ('controllerid', models.IntegerField(blank=True, db_column='ControllerId', null=True)),
                ('readerid', models.IntegerField(blank=True, db_column='ReaderId', null=True)),
                ('rawdata', models.CharField(blank=True, db_column='RawData', max_length=1000, null=True)),
                ('userid', models.IntegerField(blank=True, db_column='UserId', null=True)),
                ('workstationname', models.CharField(blank=True, db_column='WorkstationName', max_length=50, null=True)),
                ('comment', models.CharField(blank=True, db_column='Comment', max_length=300, null=True)),
                ('card', models.CharField(blank=True, db_column='Card', max_length=50, null=True)),
            ],
            options={
                'db_table': 'HardwareEvent',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Hotkey',
            fields=[
                ('hotkeyid', models.AutoField(db_column='HotKeyId', primary_key=True, serialize=False)),
                ('shortcut', models.IntegerField(db_column='Shortcut')),
                ('stocktypeid', models.SmallIntegerField(db_column='StockTypeId')),
                ('amount', models.DecimalField(db_column='Amount', decimal_places=2, max_digits=18)),
                ('caption', models.CharField(db_column='Caption', max_length=100)),
                ('color1', models.IntegerField(blank=True, db_column='Color1', null=True)),
                ('color2', models.IntegerField(blank=True, db_column='Color2', null=True)),
                ('gradient', models.IntegerField(db_column='Gradient')),
                ('order', models.IntegerField(db_column='Order')),
                ('hotkeyextendeddata', models.TextField(blank=True, db_column='HotKeyExtendedData', null=True)),
            ],
            options={
                'db_table': 'HotKey',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Inventoryreservation',
            fields=[
                ('inventoryreservationid', models.AutoField(db_column='InventoryReservationId', primary_key=True, serialize=False)),
                ('category', models.CharField(blank=True, db_column='Category', max_length=100, null=True)),
                ('displayname', models.CharField(blank=True, db_column='DisplayName', max_length=100, null=True)),
                ('size', models.CharField(blank=True, db_column='Size', max_length=100, null=True)),
                ('isgroup', models.BooleanField(blank=True, db_column='IsGroup', null=True)),
                ('targetstockid', models.IntegerField(blank=True, db_column='TargetStockId', null=True)),
                ('amount', models.DecimalField(blank=True, db_column='Amount', decimal_places=2, max_digits=18, null=True)),
                ('hasbeenredeemed', models.BooleanField(blank=True, db_column='HasBeenRedeemed', null=True)),
            ],
            options={
                'db_table': 'InventoryReservation',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Inventoryreservationlimit',
            fields=[
                ('inventoryreservationlimitid', models.AutoField(db_column='InventoryReservationLimitId', primary_key=True, serialize=False)),
                ('procatcategoryid', models.IntegerField(blank=True, db_column='ProcatCategoryId', null=True)),
                ('size', models.CharField(blank=True, db_column='Size', max_length=10, null=True)),
                ('displayname', models.CharField(blank=True, db_column='DisplayName', max_length=100, null=True)),
                ('remainingamount', models.DecimalField(blank=True, db_column='RemainingAmount', decimal_places=2, max_digits=18, null=True)),
            ],
            options={
                'db_table': 'InventoryReservationLimit',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Kassasost',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('num_kass', models.SmallIntegerField(blank=True, null=True)),
                ('smena', models.SmallIntegerField(blank=True, null=True)),
                ('ncheck', models.SmallIntegerField(blank=True, null=True)),
                ('nalin', models.DecimalField(blank=True, decimal_places=4, max_digits=19, null=True)),
                ('beznalin', models.DecimalField(blank=True, decimal_places=4, max_digits=19, null=True)),
                ('nalout', models.DecimalField(blank=True, decimal_places=4, max_digits=19, null=True)),
                ('beznalout', models.DecimalField(blank=True, decimal_places=4, max_digits=19, null=True)),
                ('vnes', models.DecimalField(blank=True, decimal_places=4, max_digits=19, null=True)),
                ('vines', models.DecimalField(blank=True, decimal_places=4, max_digits=19, null=True)),
                ('computername', models.CharField(blank=True, db_column='ComputerName', max_length=50, null=True)),
                ('name', models.CharField(blank=True, db_column='Name', max_length=50, null=True)),
            ],
            options={
                'db_table': 'KassaSost',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Kkm',
            fields=[
                ('kkmid', models.AutoField(db_column='KkmId', primary_key=True, serialize=False)),
                ('name', models.CharField(db_column='Name', max_length=50)),
                ('vendornumber', models.CharField(blank=True, db_column='VendorNumber', max_length=50, null=True)),
                ('registrationnumber', models.CharField(blank=True, db_column='RegistrationNumber', max_length=50, null=True)),
                ('config', models.TextField(blank=True, db_column='Config', null=True)),
                ('active', models.BooleanField(db_column='Active')),
                ('model', models.CharField(blank=True, db_column='Model', max_length=50, null=True)),
                ('posnumber', models.IntegerField(db_column='PosNumber')),
                ('smena', models.IntegerField(blank=True, db_column='Smena', null=True)),
                ('ncheck', models.IntegerField(blank=True, db_column='NCheck', null=True)),
                ('nalin', models.DecimalField(blank=True, db_column='NalIn', decimal_places=2, max_digits=18, null=True)),
                ('beznalin', models.DecimalField(blank=True, db_column='BeznalIn', decimal_places=2, max_digits=18, null=True)),
                ('nalout', models.DecimalField(blank=True, db_column='NalOut', decimal_places=2, max_digits=18, null=True)),
                ('beznalout', models.DecimalField(blank=True, db_column='BeznalOut', decimal_places=2, max_digits=18, null=True)),
                ('vnes', models.DecimalField(blank=True, db_column='Vnes', decimal_places=2, max_digits=18, null=True)),
                ('vines', models.DecimalField(blank=True, db_column='Vines', decimal_places=2, max_digits=18, null=True)),
                ('computername', models.DecimalField(blank=True, db_column='ComputerName', decimal_places=2, max_digits=18, null=True)),
                ('main', models.BooleanField(blank=True, db_column='Main', null=True)),
                ('extendeddata', models.TextField(blank=True, db_column='ExtendedData', null=True)),
            ],
            options={
                'db_table': 'Kkm',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Kursovka',
            fields=[
                ('kursovkaid', models.AutoField(db_column='KursovkaId', primary_key=True, serialize=False)),
                ('start', models.DateTimeField(db_column='Start')),
                ('end', models.DateTimeField(db_column='End')),
                ('series', models.CharField(blank=True, db_column='Series', max_length=20, null=True)),
                ('number', models.IntegerField(blank=True, db_column='Number', null=True)),
            ],
            options={
                'db_table': 'Kursovka',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Kursovkadetail',
            fields=[
                ('kursovkadetailid', models.AutoField(db_column='KursovkaDetailId', primary_key=True, serialize=False)),
                ('returntime', models.DateTimeField(blank=True, db_column='ReturnTime', null=True)),
                ('cost', models.DecimalField(blank=True, db_column='Cost', decimal_places=2, max_digits=18, null=True)),
                ('returncost', models.DecimalField(blank=True, db_column='ReturnCost', decimal_places=2, max_digits=18, null=True)),
            ],
            options={
                'db_table': 'KursovkaDetail',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Leaseorder',
            fields=[
                ('leaseorderid', models.AutoField(db_column='LeaseOrderId', primary_key=True, serialize=False)),
                ('closed', models.BooleanField(db_column='Closed')),
                ('closetime', models.DateTimeField(blank=True, db_column='CloseTime', null=True)),
                ('opentime', models.DateTimeField(blank=True, db_column='OpenTime', null=True)),
            ],
            options={
                'db_table': 'LeaseOrder',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Lookupinterface',
            fields=[
                ('lookupinterfaceid', models.IntegerField(db_column='LookupInterfaceId', primary_key=True, serialize=False)),
                ('parentid', models.IntegerField(db_column='ParentId')),
                ('viewstring', models.CharField(db_column='ViewString', max_length=100)),
                ('isfolder', models.BooleanField(db_column='IsFolder')),
                ('lookuplink', models.BigIntegerField(blank=True, db_column='LookupLink', null=True)),
                ('lookuptype', models.SmallIntegerField(db_column='LookupType')),
                ('extendeddata', models.TextField(blank=True, db_column='ExtendedData', null=True)),
            ],
            options={
                'db_table': 'LookupInterface',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Mastertransaction',
            fields=[
                ('mastertransactionid', models.AutoField(db_column='MasterTransactionId', primary_key=True, serialize=False)),
                ('transtime', models.DateTimeField(db_column='TransTime')),
                ('userid', models.CharField(db_column='UserId', max_length=50)),
                ('servicepointid', models.IntegerField(blank=True, db_column='ServicePointId', null=True)),
                ('servertime', models.DateTimeField(blank=True, db_column='ServerTime', null=True)),
                ('isoffline', models.BooleanField(db_column='IsOffline')),
                ('extendeddata', models.TextField(blank=True, db_column='ExtendedData', null=True)),
                ('externalid', models.CharField(blank=True, db_column='ExternalId', max_length=50, null=True)),
                ('hash', models.CharField(blank=True, db_column='Hash', max_length=50, null=True)),
                ('machine', models.CharField(blank=True, db_column='Machine', max_length=50, null=True)),
            ],
            options={
                'db_table': 'MasterTransaction',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Module',
            fields=[
                ('moduleid', models.CharField(db_column='ModuleId', max_length=50, primary_key=True, serialize=False)),
                ('name', models.CharField(db_column='Name', max_length=50)),
                ('type', models.IntegerField(blank=True, db_column='Type', null=True)),
                ('machinename', models.CharField(blank=True, db_column='MachineName', max_length=50, null=True)),
                ('version', models.CharField(blank=True, db_column='Version', max_length=20, null=True)),
                ('lastupdate', models.DateTimeField(blank=True, db_column='LastUpdate', null=True)),
                ('localconfig', models.TextField(blank=True, db_column='LocalConfig', null=True)),
                ('extendeddata', models.TextField(blank=True, db_column='ExtendedData', null=True)),
            ],
            options={
                'db_table': 'Module',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Moneypledgedetail',
            fields=[
                ('moneypledgedetailid', models.IntegerField(db_column='MoneyPledgeDetailId', primary_key=True, serialize=False)),
                ('amount', models.DecimalField(db_column='Amount', decimal_places=2, max_digits=18)),
                ('targetaccountstockid', models.IntegerField(db_column='TargetAccountStockId')),
                ('taketime', models.DateTimeField(db_column='TakeTime')),
                ('returntime', models.DateTimeField(blank=True, db_column='ReturnTime', null=True)),
            ],
            options={
                'db_table': 'MoneyPledgeDetail',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Number',
            fields=[
                ('number', models.IntegerField(db_column='Number', primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'Number',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.CharField(db_column='Id', max_length=36, primary_key=True, serialize=False)),
                ('returnorderid', models.CharField(blank=True, db_column='ReturnOrderId', max_length=64, null=True)),
                ('bankorderid', models.CharField(blank=True, db_column='BankOrderId', max_length=64, null=True)),
                ('siteid', models.IntegerField(blank=True, db_column='SiteId', null=True)),
                ('profileid', models.IntegerField(blank=True, db_column='ProfileId', null=True)),
                ('merchantid', models.IntegerField(blank=True, db_column='MerchantId', null=True)),
                ('addbalanceamount', models.DecimalField(blank=True, db_column='AddBalanceAmount', decimal_places=4, max_digits=19, null=True)),
                ('customproperty', models.CharField(blank=True, db_column='CustomProperty', max_length=2000, null=True)),
                ('appkey', models.CharField(blank=True, db_column='AppKey', max_length=30, null=True)),
            ],
            options={
                'db_table': 'Order',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Ordercheck',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('ownerid', models.IntegerField(blank=True, db_column='OwnerId', null=True)),
                ('idcategory', models.IntegerField(blank=True, db_column='IdCategory', null=True)),
                ('codecard', models.CharField(blank=True, db_column='CodeCard', max_length=50, null=True)),
                ('linked', models.BooleanField(blank=True, db_column='Linked', null=True)),
                ('from_field', models.DateTimeField(blank=True, db_column='From', null=True)),
                ('to', models.DateTimeField(blank=True, db_column='To', null=True)),
                ('time', models.DateTimeField(blank=True, db_column='Time', null=True)),
                ('amountminutes', models.IntegerField(blank=True, db_column='AmountMinutes', null=True)),
                ('idmediatype', models.IntegerField(blank=True, db_column='IdMediaType', null=True)),
                ('cardname', models.CharField(blank=True, db_column='CardName', max_length=50, null=True)),
                ('typegoods', models.SmallIntegerField(blank=True, db_column='TypeGoods', null=True)),
                ('price', models.DecimalField(blank=True, db_column='Price', decimal_places=2, max_digits=18, null=True)),
                ('firstcode', models.CharField(blank=True, db_column='FirstCode', max_length=50, null=True)),
                ('firstclientid', models.IntegerField(blank=True, db_column='FirstClientId', null=True)),
                ('dopinfo', models.TextField(blank=True, db_column='DopInfo', null=True)),
            ],
            options={
                'db_table': 'OrderCheck',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Orderdetail',
            fields=[
                ('orderdetailid', models.IntegerField(db_column='OrderDetailId', primary_key=True, serialize=False)),
                ('orderid', models.IntegerField(db_column='OrderId')),
                ('giveouttime', models.DateTimeField(db_column='GiveOutTime')),
                ('returntime', models.DateTimeField(blank=True, db_column='ReturnTime', null=True)),
                ('cost', models.DecimalField(blank=True, db_column='Cost', decimal_places=2, max_digits=18, null=True)),
            ],
            options={
                'db_table': 'OrderDetail',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Packetdetail',
            fields=[
                ('packetdetailid', models.AutoField(db_column='PacketDetailId', primary_key=True, serialize=False)),
                ('amount', models.DecimalField(db_column='Amount', decimal_places=2, max_digits=18)),
            ],
            options={
                'db_table': 'PacketDetail',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Permission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('accesscode', models.BooleanField(db_column='AccessCode')),
            ],
            options={
                'db_table': 'Permission',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Personalinfo',
            fields=[
                ('firstname', models.CharField(blank=True, db_column='FirstName', max_length=50, null=True)),
                ('lastname', models.CharField(blank=True, db_column='LastName', max_length=50, null=True)),
                ('secondname', models.CharField(blank=True, db_column='SecondName', max_length=50, null=True)),
                ('info', models.TextField(blank=True, db_column='Info', null=True)),
                ('weight', models.IntegerField(blank=True, db_column='Weight', null=True)),
                ('height', models.IntegerField(blank=True, db_column='Height', null=True)),
                ('feetsize', models.IntegerField(blank=True, db_column='FeetSize', null=True)),
                ('passport', models.CharField(blank=True, db_column='Passport', max_length=100, null=True)),
                ('drivinglicence', models.CharField(blank=True, db_column='DrivingLicence', max_length=100, null=True)),
                ('armypassport', models.CharField(blank=True, db_column='ArmyPassport', max_length=100, null=True)),
                ('document', models.CharField(blank=True, db_column='Document', max_length=100, null=True)),
                ('isvip', models.BooleanField(db_column='IsVip')),
                ('accountstockid', models.IntegerField(db_column='AccountStockId', primary_key=True, serialize=False)),
                ('address', models.CharField(blank=True, db_column='Address', max_length=100, null=True)),
                ('phone', models.CharField(blank=True, db_column='Phone', max_length=50, null=True)),
                ('email', models.CharField(blank=True, db_column='Email', max_length=50, null=True)),
                ('birthday', models.DateTimeField(blank=True, db_column='Birthday', null=True)),
                ('passwordhash', models.CharField(blank=True, db_column='PasswordHash', max_length=100, null=True)),
                ('ispasswordchangerequired', models.BooleanField(db_column='IsPasswordChangeRequired')),
                ('passportcode', models.CharField(blank=True, db_column='PassportCode', max_length=50, null=True)),
                ('drivinglicencecode', models.CharField(blank=True, db_column='DrivingLicenceCode', max_length=50, null=True)),
                ('tempemail', models.CharField(blank=True, db_column='TempEmail', max_length=50, null=True)),
                ('tempphone', models.CharField(blank=True, db_column='TempPhone', max_length=50, null=True)),
            ],
            options={
                'db_table': 'PersonalInfo',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Place',
            fields=[
                ('placeid', models.AutoField(db_column='PlaceId', primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, db_column='Name', max_length=255, null=True)),
                ('quantity', models.IntegerField(blank=True, db_column='Quantity', null=True)),
                ('parentid', models.IntegerField(blank=True, db_column='ParentId', null=True)),
                ('depth', models.IntegerField(blank=True, db_column='Depth', null=True)),
                ('allowintersectschedules', models.BooleanField(db_column='AllowIntersectSchedules')),
                ('attribute', models.CharField(blank=True, db_column='Attribute', max_length=50, null=True)),
            ],
            options={
                'db_table': 'Place',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Placereserve',
            fields=[
                ('placereserveid', models.AutoField(db_column='PlaceReserveId', primary_key=True, serialize=False)),
                ('email', models.CharField(blank=True, db_column='Email', max_length=50, null=True)),
                ('description', models.CharField(blank=True, db_column='Description', max_length=255, null=True)),
                ('reservetime', models.DateTimeField(blank=True, db_column='ReserveTime', null=True)),
                ('status', models.IntegerField(blank=True, db_column='Status', null=True)),
                ('isactive', models.BooleanField(blank=True, db_column='IsActive', null=True)),
                ('phone', models.CharField(blank=True, db_column='Phone', max_length=50, null=True)),
                ('explicitexpirationtime', models.DateTimeField(blank=True, db_column='ExplicitExpirationTime', null=True)),
            ],
            options={
                'db_table': 'PlaceReserve',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Placescheme',
            fields=[
                ('placeschemeid', models.AutoField(db_column='PlaceSchemeId', primary_key=True, serialize=False)),
                ('schemeobjecttype', models.IntegerField(db_column='SchemeObjectType')),
                ('idlabel', models.CharField(blank=True, db_column='IdLabel', max_length=50, null=True)),
                ('layer', models.IntegerField(db_column='Layer')),
                ('value', models.TextField(blank=True, db_column='Value', null=True)),
                ('timestamp', models.DateTimeField(db_column='TimeStamp')),
            ],
            options={
                'db_table': 'PlaceScheme',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Placetype',
            fields=[
                ('placetypeid', models.AutoField(db_column='PlaceTypeId', primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, db_column='Name', max_length=50, null=True)),
                ('nameforweb', models.CharField(blank=True, db_column='NameForWeb', max_length=50, null=True)),
                ('freecolor', models.IntegerField(blank=True, db_column='FreeColor', null=True)),
                ('bookedcolor', models.IntegerField(blank=True, db_column='BookedColor', null=True)),
                ('reservedcolor', models.IntegerField(blank=True, db_column='ReservedColor', null=True)),
                ('reservedcurrentcolor', models.IntegerField(blank=True, db_column='ReservedCurrentColor', null=True)),
                ('selectedcolor', models.IntegerField(blank=True, db_column='SelectedColor', null=True)),
                ('selectedcurrentcolor', models.IntegerField(blank=True, db_column='SelectedCurrentColor', null=True)),
            ],
            options={
                'db_table': 'PlaceType',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Pledge',
            fields=[
                ('pledgeid', models.IntegerField(db_column='PledgeId', primary_key=True, serialize=False)),
                ('descr', models.CharField(db_column='Descr', max_length=1024)),
                ('exist', models.BooleanField(db_column='Exist')),
            ],
            options={
                'db_table': 'Pledge',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Prepay',
            fields=[
                ('prepayid', models.IntegerField(db_column='PrepayId', primary_key=True, serialize=False)),
                ('currencyid', models.IntegerField(db_column='CurrencyId')),
                ('balance', models.DecimalField(db_column='Balance', decimal_places=2, max_digits=18)),
            ],
            options={
                'db_table': 'Prepay',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Price',
            fields=[
                ('priceid', models.IntegerField(db_column='PriceId', primary_key=True, serialize=False)),
                ('allow', models.BooleanField(db_column='Allow')),
                ('amount', models.DecimalField(db_column='Amount', decimal_places=2, max_digits=18)),
                ('min', models.DecimalField(db_column='Min', decimal_places=2, max_digits=18)),
                ('max', models.DecimalField(db_column='Max', decimal_places=2, max_digits=18)),
                ('round', models.IntegerField(db_column='Round')),
            ],
            options={
                'db_table': 'Price',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Priceparams',
            fields=[
                ('priceparamsid', models.IntegerField(db_column='PriceParamsId', primary_key=True, serialize=False)),
                ('price', models.DecimalField(db_column='Price', decimal_places=2, max_digits=18)),
                ('maxprice', models.DecimalField(db_column='MaxPrice', decimal_places=2, max_digits=18)),
                ('minprice', models.DecimalField(db_column='MinPrice', decimal_places=2, max_digits=18)),
                ('rounddigits', models.IntegerField(db_column='RoundDigits')),
            ],
            options={
                'db_table': 'PriceParams',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Reader',
            fields=[
                ('readerid', models.IntegerField(db_column='ReaderId', primary_key=True, serialize=False)),
                ('code', models.IntegerField(db_column='Code')),
                ('facilityid', models.IntegerField(blank=True, db_column='FacilityId', null=True)),
                ('timedelay', models.FloatField(db_column='TimeDelay')),
                ('regime', models.SmallIntegerField(blank=True, db_column='Regime', null=True)),
                ('entry', models.SmallIntegerField(db_column='Entry')),
                ('use', models.SmallIntegerField(db_column='Use')),
                ('denywithinventory', models.BooleanField(db_column='DenyWithInventory')),
                ('denywithoutstoredpledge', models.BooleanField(db_column='DenyWithoutStoredPledge')),
                ('codeconvert', models.IntegerField(db_column='CodeConvert')),
                ('denywithdebt', models.BooleanField(db_column='DenyWithDebt')),
                ('closeclientaccount', models.BooleanField(db_column='CloseClientAccount')),
                ('directioncode', models.IntegerField(db_column='DirectionCode')),
                ('extendeddata', models.TextField(blank=True, db_column='ExtendedData', null=True)),
                ('cashid', models.IntegerField(blank=True, db_column='CashID', null=True)),
                ('mediaid', models.IntegerField(blank=True, db_column='MediaID', null=True)),
                ('disablecheckendpass', models.BooleanField(db_column='DisableCheckEndPass')),
                ('facilitypassid', models.IntegerField(blank=True, db_column='FacilityPassID', null=True)),
                ('facilitytype', models.BooleanField(blank=True, db_column='FacilityType', null=True)),
            ],
            options={
                'db_table': 'Reader',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Reservationorder',
            fields=[
                ('reservationorderid', models.AutoField(db_column='ReservationOrderId', primary_key=True, serialize=False)),
                ('code', models.CharField(blank=True, db_column='Code', max_length=50, null=True)),
                ('superaccountid', models.IntegerField(blank=True, db_column='SuperAccountId', null=True)),
                ('storageplacenumber', models.IntegerField(blank=True, db_column='StoragePlaceNumber', null=True)),
                ('datefrom', models.DateTimeField(blank=True, db_column='DateFrom', null=True)),
                ('dateto', models.DateTimeField(blank=True, db_column='DateTo', null=True)),
                ('registrationdate', models.DateTimeField(blank=True, db_column='RegistrationDate', null=True)),
                ('comment', models.TextField(blank=True, db_column='Comment', null=True)),
                ('clientdescription', models.CharField(blank=True, db_column='ClientDescription', max_length=100, null=True)),
            ],
            options={
                'db_table': 'ReservationOrder',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Rule',
            fields=[
                ('ruleid', models.AutoField(db_column='RuleId', primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, db_column='Name', max_length=50, null=True)),
                ('ruleraw', models.TextField(blank=True, db_column='RuleRaw', null=True)),
            ],
            options={
                'db_table': 'Rule',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Schedule',
            fields=[
                ('scheduleid', models.IntegerField(db_column='ScheduleId', primary_key=True, serialize=False)),
                ('scheduletype', models.BooleanField(db_column='ScheduleType')),
                ('name', models.CharField(db_column='Name', max_length=100)),
            ],
            options={
                'db_table': 'Schedule',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Seasontemplate',
            fields=[
                ('seasontemplateid', models.AutoField(db_column='SeasonTemplateId', primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, db_column='Name', max_length=100, null=True)),
                ('description', models.CharField(blank=True, db_column='Description', max_length=255, null=True)),
            ],
            options={
                'db_table': 'SeasonTemplate',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Secobject',
            fields=[
                ('objectid', models.AutoField(db_column='ObjectID', primary_key=True, serialize=False)),
                ('objectkey', models.CharField(db_column='ObjectKey', max_length=200, unique=True)),
                ('name', models.CharField(db_column='Name', max_length=100)),
                ('group', models.CharField(db_column='Group', max_length=100)),
            ],
            options={
                'db_table': 'SecObject',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Secsubject',
            fields=[
                ('subjectid', models.AutoField(db_column='SubjectID', primary_key=True, serialize=False)),
                ('name', models.CharField(db_column='Name', max_length=50, unique=True)),
                ('isgroup', models.BooleanField(db_column='IsGroup')),
                ('pwdhash', models.CharField(blank=True, db_column='PwdHash', max_length=50, null=True)),
                ('cardhash', models.CharField(blank=True, db_column='CardHash', max_length=50, null=True)),
                ('isembedded', models.BooleanField(db_column='IsEmbedded')),
                ('blocked', models.BooleanField(blank=True, db_column='Blocked', null=True)),
            ],
            options={
                'db_table': 'SecSubject',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Servicepoint',
            fields=[
                ('servicepointid', models.AutoField(db_column='ServicePointId', primary_key=True, serialize=False)),
                ('name', models.CharField(db_column='Name', max_length=100)),
                ('type', models.IntegerField(db_column='Type')),
                ('code', models.CharField(blank=True, db_column='Code', max_length=20, null=True)),
                ('isinternal', models.BooleanField(db_column='IsInternal')),
            ],
            options={
                'db_table': 'ServicePoint',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Servicepointinfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('servicepointtype', models.IntegerField(db_column='ServicePointType')),
            ],
            options={
                'db_table': 'ServicePointInfo',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Shablonscardprinter',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('name', models.CharField(db_column='Name', max_length=50)),
                ('extendeddata', models.TextField(blank=True, db_column='ExtendedData', null=True)),
                ('shablontype', models.SmallIntegerField(db_column='ShablonType')),
            ],
            options={
                'db_table': 'ShablonsCardPrinter',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Stafftosubdivision',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'StaffToSubdivision',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Stocktype',
            fields=[
                ('stocktype', models.SmallIntegerField(db_column='StockType', primary_key=True, serialize=False)),
                ('caption', models.CharField(db_column='Caption', max_length=50)),
                ('iscategory', models.BooleanField(db_column='IsCategory')),
                ('isgood', models.BooleanField(db_column='IsGood')),
                ('ispay', models.BooleanField(db_column='IsPay')),
                ('iscount', models.BooleanField(db_column='IsCount')),
                ('istime', models.BooleanField(db_column='IsTime')),
                ('isdepricated', models.BooleanField(db_column='IsDepricated')),
            ],
            options={
                'db_table': 'StockType',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Storage',
            fields=[
                ('key', models.CharField(db_column='Key', max_length=100, primary_key=True, serialize=False)),
                ('object', models.TextField(blank=True, db_column='Object', null=True)),
            ],
            options={
                'db_table': 'Storage',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Storedpledge',
            fields=[
                ('gettime', models.DateTimeField(blank=True, db_column='GetTime', null=True)),
                ('returntime', models.DateTimeField(blank=True, db_column='ReturnTime', null=True)),
                ('isactive', models.BooleanField(blank=True, db_column='IsActive', null=True)),
                ('cellnumber', models.IntegerField(db_column='CellNumber')),
                ('comment', models.CharField(blank=True, db_column='Comment', max_length=100, null=True)),
                ('storedpledgeid', models.AutoField(db_column='StoredPledgeId', primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'StoredPledge',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Strictticketreel',
            fields=[
                ('strictticketreelid', models.AutoField(db_column='StrictTicketReelId', primary_key=True, serialize=False)),
                ('set', models.CharField(db_column='Set', max_length=5)),
                ('start', models.IntegerField(db_column='Start')),
                ('step', models.IntegerField(db_column='Step')),
                ('count', models.IntegerField(db_column='Count')),
                ('position', models.IntegerField(db_column='Position')),
                ('usestation', models.CharField(blank=True, db_column='UseStation', max_length=50, null=True)),
            ],
            options={
                'db_table': 'StrictTicketReel',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Subdivision',
            fields=[
                ('subdivisionid', models.AutoField(db_column='SubdivisionId', primary_key=True, serialize=False)),
                ('name', models.CharField(db_column='Name', max_length=100)),
            ],
            options={
                'db_table': 'Subdivision',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Superaccount',
            fields=[
                ('superaccountid', models.IntegerField(db_column='SuperAccountId', primary_key=True, serialize=False)),
                ('type', models.IntegerField(db_column='Type')),
                ('descr', models.CharField(blank=True, db_column='Descr', max_length=50, null=True)),
                ('canregister', models.DateTimeField(db_column='CanRegister')),
                ('canpass', models.DateTimeField(db_column='CanPass')),
                ('isstuff', models.BooleanField(db_column='IsStuff')),
                ('isblocked', models.BooleanField(db_column='IsBlocked')),
                ('blockreason', models.CharField(blank=True, db_column='BlockReason', max_length=100, null=True)),
                ('denyreturn', models.BooleanField(db_column='DenyReturn')),
                ('discountcard', models.BooleanField(db_column='DiscountCard')),
                ('address', models.CharField(blank=True, db_column='Address', max_length=50, null=True)),
                ('inn', models.CharField(blank=True, db_column='Inn', max_length=15, null=True)),
                ('externalid', models.CharField(blank=True, db_column='ExternalId', max_length=50, null=True)),
                ('registertime', models.DateTimeField(db_column='RegisterTime')),
                ('lasttransactiontime', models.DateTimeField(db_column='LastTransactionTime')),
                ('allowignorestoredpledge', models.BooleanField(db_column='AllowIgnoreStoredPledge')),
                ('email', models.CharField(blank=True, db_column='Email', max_length=50, null=True)),
                ('latitude', models.DecimalField(blank=True, db_column='Latitude', decimal_places=6, max_digits=10, null=True)),
                ('longitude', models.DecimalField(blank=True, db_column='Longitude', decimal_places=6, max_digits=10, null=True)),
                ('phone', models.CharField(blank=True, db_column='Phone', max_length=20, null=True)),
                ('website', models.CharField(blank=True, db_column='WebSite', max_length=255, null=True)),
                ('tng_profileid', models.CharField(blank=True, db_column='TNG_ProfileId', max_length=50, null=True)),
                ('colary_profileid', models.CharField(blank=True, db_column='Colary_ProfileId', max_length=50, null=True)),
                ('tng_profileverified', models.BooleanField(db_column='TNG_ProfileVerified')),
            ],
            options={
                'db_table': 'SuperAccount',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Superaccountclaim',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.IntegerField(db_column='Type')),
                ('value', models.CharField(db_column='Value', max_length=50)),
                ('expirationdate', models.DateTimeField(db_column='ExpirationDate')),
            ],
            options={
                'db_table': 'SuperAccountClaim',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Superaccountrelation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(db_column='Date')),
                ('comment', models.CharField(blank=True, db_column='Comment', max_length=100, null=True)),
                ('extendeddata', models.TextField(blank=True, db_column='ExtendedData', null=True)),
            ],
            options={
                'db_table': 'SuperAccountRelation',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Superaccountrelationtype',
            fields=[
                ('superaccountrelationtypeid', models.AutoField(db_column='SuperAccountRelationTypeId', primary_key=True, serialize=False)),
                ('parentname', models.CharField(db_column='ParentName', max_length=50)),
                ('slavename', models.CharField(db_column='SlaveName', max_length=50)),
                ('parenttaginheritance', models.IntegerField(blank=True, db_column='ParentTagInheritance', null=True)),
                ('extendeddata', models.TextField(blank=True, db_column='ExtendedData', null=True)),
                ('allowuseparentmoney', models.BooleanField(db_column='AllowUseParentMoney')),
                ('allowuseparentstoredpledge', models.BooleanField(db_column='AllowUseParentStoredPledge')),
                ('deleteonparentreturnstoredpledge', models.BooleanField(db_column='DeleteOnParentReturnStoredPledge')),
                ('adminonly', models.BooleanField(db_column='AdminOnly')),
            ],
            options={
                'db_table': 'SuperAccountRelationType',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Superaccounttimestop',
            fields=[
                ('superaccounttimestopid', models.AutoField(db_column='SuperAccountTimeStopId', primary_key=True, serialize=False)),
                ('scope', models.IntegerField(db_column='Scope')),
                ('targettype', models.SmallIntegerField(db_column='TargetType')),
                ('from_field', models.DateTimeField(db_column='From')),
                ('to', models.DateTimeField(blank=True, db_column='To', null=True)),
            ],
            options={
                'db_table': 'SuperAccountTimeStop',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('tagid', models.AutoField(db_column='TagId', primary_key=True, serialize=False)),
                ('name', models.CharField(db_column='Name', max_length=100)),
            ],
            options={
                'db_table': 'Tag',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Tariff',
            fields=[
                ('tariffid', models.IntegerField(db_column='TariffId', primary_key=True, serialize=False)),
                ('targetgoodtype', models.SmallIntegerField(db_column='TargetGoodType')),
                ('payrighttype', models.SmallIntegerField(db_column='PayRightType')),
                ('dependence', models.IntegerField(db_column='Dependence')),
                ('timingscheduletime', models.SmallIntegerField(db_column='TimingScheduleTime')),
                ('extendeddata', models.TextField(blank=True, db_column='ExtendedData', null=True)),
                ('paybybooking', models.IntegerField(db_column='PayByBooking')),
            ],
            options={
                'db_table': 'Tariff',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Tariffextension',
            fields=[
                ('tariffextensionid', models.IntegerField(db_column='TariffExtensionId', primary_key=True, serialize=False)),
                ('type', models.IntegerField(db_column='Type')),
                ('max', models.DecimalField(blank=True, db_column='Max', decimal_places=2, max_digits=18, null=True)),
                ('min', models.DecimalField(blank=True, db_column='Min', decimal_places=2, max_digits=18, null=True)),
                ('amount', models.DecimalField(blank=True, db_column='Amount', decimal_places=2, max_digits=18, null=True)),
                ('round', models.IntegerField(blank=True, db_column='Round', null=True)),
                ('allow', models.BooleanField(blank=True, db_column='Allow', null=True)),
                ('iscompletepay', models.BooleanField(db_column='IsCompletePay')),
                ('orderofpayments', models.IntegerField(db_column='OrderOfPayments')),
                ('canaddbonus', models.BooleanField(db_column='CanAddBonus')),
                ('number', models.DecimalField(db_column='Number', decimal_places=2, max_digits=18)),
                ('overdraft', models.DecimalField(db_column='Overdraft', decimal_places=2, max_digits=18)),
                ('attendantamount', models.IntegerField(blank=True, db_column='AttendantAmount', null=True)),
                ('extendeddata', models.TextField(blank=True, db_column='ExtendedData', null=True)),
            ],
            options={
                'db_table': 'TariffExtension',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Tarifftemplate',
            fields=[
                ('tarifftemplateid', models.AutoField(db_column='TariffTemplateId', primary_key=True, serialize=False)),
                ('name', models.CharField(db_column='Name', max_length=100)),
                ('dependence', models.IntegerField(db_column='Dependence')),
            ],
            options={
                'db_table': 'TariffTemplate',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Terminallog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('terminalnumber', models.IntegerField(db_column='TerminalNumber')),
                ('totalsum', models.DecimalField(db_column='TotalSum', decimal_places=2, max_digits=18)),
                ('nominal', models.DecimalField(blank=True, db_column='Nominal', decimal_places=2, max_digits=18, null=True)),
                ('count', models.IntegerField(db_column='Count')),
                ('time', models.DateTimeField(db_column='Time')),
                ('action', models.IntegerField(db_column='Action')),
                ('device', models.IntegerField(db_column='Device')),
            ],
            options={
                'db_table': 'TerminalLog',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Timablehold',
            fields=[
                ('timableholdid', models.AutoField(db_column='TimableHoldId', primary_key=True, serialize=False)),
                ('from_field', models.DateTimeField(db_column='From')),
                ('to', models.DateTimeField(db_column='To')),
                ('userid', models.IntegerField(db_column='UserId')),
                ('comment', models.TextField(blank=True, db_column='Comment', null=True)),
            ],
            options={
                'db_table': 'TimableHold',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Timepattern',
            fields=[
                ('timepatternid', models.AutoField(db_column='TimePatternId', primary_key=True, serialize=False)),
                ('name', models.CharField(db_column='Name', max_length=100)),
                ('type', models.IntegerField(db_column='Type')),
                ('fromdate', models.DateTimeField(blank=True, db_column='FromDate', null=True)),
                ('todate', models.DateTimeField(blank=True, db_column='ToDate', null=True)),
                ('from_field', models.IntegerField(blank=True, db_column='From', null=True)),
                ('to', models.IntegerField(blank=True, db_column='To', null=True)),
                ('duration', models.IntegerField(blank=True, db_column='Duration', null=True)),
                ('activatetype', models.IntegerField(blank=True, db_column='ActivateType', null=True)),
                ('canactivatefrom', models.DateTimeField(blank=True, db_column='CanActivateFrom', null=True)),
                ('canactivateto', models.DateTimeField(blank=True, db_column='CanActivateTo', null=True)),
                ('daystoactivate', models.IntegerField(blank=True, db_column='DaysToActivate', null=True)),
                ('dayround', models.IntegerField(db_column='DayRound')),
                ('startafter', models.IntegerField(db_column='StartAfter')),
                ('allowedbeforeorafter', models.IntegerField(blank=True, db_column='AllowedBeforeOrAfter', null=True)),
                ('holdsenabled', models.BooleanField(blank=True, db_column='HoldsEnabled', null=True)),
                ('maxholddays', models.IntegerField(blank=True, db_column='MaxHoldDays', null=True)),
                ('maxholdsnumber', models.IntegerField(blank=True, db_column='MaxHoldsNumber', null=True)),
                ('options', models.TextField(blank=True, db_column='Options', null=True)),
            ],
            options={
                'db_table': 'TimePattern',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Timinginterval',
            fields=[
                ('timingintervalid', models.IntegerField(db_column='TimingIntervalId', primary_key=True, serialize=False)),
                ('start', models.IntegerField(db_column='Start')),
                ('end', models.IntegerField(db_column='End')),
                ('step', models.IntegerField(db_column='Step')),
                ('delta', models.IntegerField(db_column='Delta')),
            ],
            options={
                'db_table': 'TimingInterval',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Timingschedule',
            fields=[
                ('timingscheduleid', models.AutoField(db_column='TimingScheduleId', primary_key=True, serialize=False)),
                ('targettype', models.SmallIntegerField(db_column='TargetType')),
                ('data', models.TextField(blank=True, db_column='Data', null=True)),
            ],
            options={
                'db_table': 'TimingSchedule',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Transactiondetail',
            fields=[
                ('transactiondetailid', models.AutoField(db_column='TransactionDetailId', primary_key=True, serialize=False)),
                ('amount', models.DecimalField(db_column='Amount', decimal_places=2, max_digits=18)),
                ('hash', models.CharField(blank=True, db_column='Hash', max_length=50, null=True)),
            ],
            options={
                'db_table': 'TransactionDetail',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Transactionprocessingrule',
            fields=[
                ('transactionprocessingruleid', models.AutoField(db_column='TransactionProcessingRuleId', primary_key=True, serialize=False)),
                ('name', models.CharField(db_column='Name', max_length=100)),
                ('isactive', models.BooleanField(db_column='IsActive')),
                ('from_field', models.DateTimeField(blank=True, db_column='From', null=True)),
                ('to', models.DateTimeField(blank=True, db_column='To', null=True)),
                ('body', models.TextField(blank=True, db_column='Body', null=True)),
            ],
            options={
                'db_table': 'TransactionProcessingRule',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Transactionprocessingrulelog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time', models.DateTimeField(db_column='Time')),
            ],
            options={
                'db_table': 'TransactionProcessingRuleLog',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Transactionrefinement',
            fields=[
                ('transactionrefinementid', models.AutoField(db_column='TransactionRefinementId', primary_key=True, serialize=False)),
                ('overdraftvolume', models.DecimalField(blank=True, db_column='OverdraftVolume', decimal_places=2, max_digits=18, null=True)),
                ('moneyvolume', models.DecimalField(blank=True, db_column='MoneyVolume', decimal_places=2, max_digits=18, null=True)),
            ],
            options={
                'db_table': 'TransactionRefinement',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='User2Groups',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('groupid', models.IntegerField(db_column='GroupID')),
            ],
            options={
                'db_table': 'User2Groups',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Usertocategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'UserToCategory',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Vatrate',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('vattype', models.IntegerField(db_column='VatType')),
                ('name', models.CharField(blank=True, db_column='Name', max_length=50, null=True)),
                ('rate', models.DecimalField(blank=True, db_column='Rate', decimal_places=2, max_digits=18, null=True)),
                ('withoutvat', models.BooleanField(blank=True, db_column='Withoutvat', null=True)),
                ('idatol', models.SmallIntegerField(blank=True, db_column='IdAtol', null=True)),
                ('idprim', models.SmallIntegerField(blank=True, db_column='IdPrim', null=True)),
                ('idshtrih', models.SmallIntegerField(blank=True, db_column='IdShtrih', null=True)),
            ],
            options={
                'db_table': 'VatRate',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Inventory',
            fields=[
                ('code', models.CharField(db_column='Code', max_length=50)),
                ('lastuse', models.DateTimeField(blank=True, db_column='LastUse', null=True)),
                ('inventorizationnumber', models.BigIntegerField(blank=True, db_column='InventorizationNumber', null=True)),
                ('name', models.CharField(blank=True, db_column='Name', max_length=100, null=True)),
                ('manufacter', models.CharField(blank=True, db_column='Manufacter', max_length=50, null=True)),
                ('model', models.CharField(blank=True, db_column='Model', max_length=50, null=True)),
                ('size', models.CharField(blank=True, db_column='Size', max_length=10, null=True)),
                ('price', models.DecimalField(blank=True, db_column='Price', decimal_places=2, max_digits=18, null=True)),
                ('accountstockid', models.OneToOneField(db_column='AccountStockId', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='barsloader.Accountstock')),
                ('isactive', models.BooleanField(db_column='IsActive')),
                ('stocktype', models.SmallIntegerField(db_column='StockType')),
                ('amount', models.DecimalField(db_column='Amount', decimal_places=2, max_digits=18)),
                ('externalid', models.IntegerField(blank=True, db_column='ExternalId', null=True)),
            ],
            options={
                'db_table': 'Inventory',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Orderstatus',
            fields=[
                ('orderid', models.OneToOneField(db_column='OrderId', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='barsloader.Order')),
                ('status', models.SmallIntegerField(db_column='Status')),
                ('timestamp', models.DateTimeField(db_column='TimeStamp')),
            ],
            options={
                'db_table': 'OrderStatus',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Seasontemplatedetail',
            fields=[
                ('seasontemplateid', models.OneToOneField(db_column='SeasonTemplateId', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='barsloader.Seasontemplate')),
                ('isdefault', models.BooleanField(db_column='IsDefault')),
            ],
            options={
                'db_table': 'SeasonTemplateDetail',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Userextension',
            fields=[
                ('userextensionid', models.OneToOneField(db_column='UserExtensionId', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='barsloader.Secsubject')),
                ('password', models.IntegerField(blank=True, db_column='Password', null=True)),
            ],
            options={
                'db_table': 'UserExtension',
                'managed': False,
            },
        ),
    ]
